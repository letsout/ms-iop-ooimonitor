<?xml version="1.0" encoding="UTF-8"?>
<!--<configuration packagingData="true"  >-->
<configuration>
    <!--spring boot 添加以下配置,从spring boot的配置中读取配置内容-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <springProperty scope="context" name="UNILOG_VERSION" source="logging.unilog.version" defaultValue="1.0"/>
    <springProperty scope="context" name="application.name" source="spring.application.name" defaultValue="UNKNOWN"/>
    <springProperty scope="context" name="server.port" source="server.port" defaultValue="UNKNOWN"/>
    <springProperty scope="context" name="LOG_FILE" source="logging.file" defaultValue="${logging.path:-logs}/${application.name}-${server.port}.log"/>
    <springProperty scope="context" name="LOG_FILE_MAX_SIZE" source="logging.logfile.maxsize" defaultValue="500MB"/>
    <springProperty scope="context" name="LOG_FILE_MAX_HISTORY" source="logging.logfile.maxhistory" defaultValue="3"/>
    <springProperty scope="context" name="LOGSTASH_DEST" source="logging.logstash.dest" defaultValue="127.0.0.1:10001" />
    <springProperty scope="context" name="LOGSTASH_WRITE_BUFFER_SIZE" source="logging.logstash.writeBufferSize" defaultValue="16384"/>
    <!--控制台日志格式-->
    <springProperty scope="context" name="CONSOL_PATTERN" source="logging.pattern.console" defaultValue="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>
    <!--日志文件日志格式-->
    <springProperty scope="context" name="FILE_PATTERN" source="logging.pattern.file"     defaultValue="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>
    <!--json日志格式，json文件和logstash-->
    <springProperty scope="context" name="JSON_PATTERN" source="logging.pattern.json"     defaultValue='{
            "uni-log-version":"${UNILOG_VERSION}",
            "service": "${application.name}",
            "pid": "${PID:-}",
            "port": "${server.port:-}",
            "thread": "%thread",
            "level": "%level",
            "trace": "%X{X-B3-TraceId:-}",
            "span": "%X{X-B3-SpanId:-}",
            "parent": "%X{X-B3-ParentSpanId:-}",
            "exportable": "%X{X-Span-Export:-}",
            "class": "%logger{50}",
            "line": "%line",
            "rest": "%message",
            "stack_trace":"%exception"
            }'/>

    <!-- 输出日志至控制台 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOL_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!-- 输出日志至文件 -->
    <appender name="flatfile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
            <maxHistory>${LOG_FILE_MAX_HISTORY}</maxHistory>
            <!--大于${LOG_FILE_MAX_SIZE}时自动拆分文件并压缩-->
            <maxFileSize>${LOG_FILE_MAX_SIZE}</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${FILE_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!--记录json格式日志至文件；调试logstash日志格式时可以打开-->
    <appender name="jsonfile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_FILE}.json</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.json.%d{yyyy-MM-dd}.gz</fileNamePattern>
            <maxHistory>${LOG_FILE_MAX_HISTORY}</maxHistory>
        </rollingPolicy>
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <timestamp>
                    <timeZone>UTC</timeZone>
                </timestamp>
                <pattern>
                    <pattern>
                        ${JSON_PATTERN}
                    </pattern>
                </pattern>
            </providers>
        </encoder>
    </appender>

    <!--发送至logstash-->
    <appender name="logstash" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <destination>${LOGSTASH_DEST}</destination>
        <!--写入缓冲区的大小:默认值8192-->
        <writeBufferSize>${LOGSTASH_WRITE_BUFFER_SIZE}</writeBufferSize>
        <connectionStrategy>
            <roundRobin>
                <connectionTTL>3 minutes</connectionTTL>
            </roundRobin>
        </connectionStrategy>
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <timestamp>
                    <timeZone>UTC</timeZone>
                </timestamp>
                <pattern>
                    <pattern>
                        ${JSON_PATTERN}
                    </pattern>
                </pattern>
            </providers>
        </encoder>
    </appender>

    <logger name="io.lettuce.core.protocol" level="ERROR"/>
    <logger name="com.asiainfo.msooimonitor.mapper.*" level="DEBUG"/>

    <root level="INFO">
        <appender-ref ref="console"/>
        <appender-ref ref="flatfile"/>
        <!--json格式写入文件-->
        <appender-ref ref="jsonfile"/>
        <!--发送到logstash-->
        <appender-ref ref="logstash"/>
    </root>

</configuration>